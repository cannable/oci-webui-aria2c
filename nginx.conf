# Some of this was based off of the stock Alpine config

daemon off;
user nginx;

worker_processes auto;
pcre_jit on;

error_log /var/log/nginx/error.log warn;

events {
	worker_connections 1024;
}

http {
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# Don't tell user agents what the server is
	server_tokens off;

	client_max_body_size 1m;

	# Since we're only hosting a small web UI and proxying a REST API, we don't
	# really need sendfile
	sendfile off;

	tcp_nopush on;
	gzip off;
	gzip_vary off;

	# Helper variable for proxying websockets.
	map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
	}

	# Specifies the main log format.
	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
			'$status $body_bytes_sent "$http_referer" '
			'"$http_user_agent" "$http_x_forwarded_for"';

	# Sets the path, format, and configuration for a buffered log write.
	access_log /var/log/nginx/access.log main;

	# Configure redirect to HTTPS.
	# NOTE: This will only work if you're redirecting to the standard SSL port
	# (443). This is more useful when you're using mac or ipvlan networks.
	server {
		listen 80 default_server;
		listen [::]:80 default_server;

		location / {
			return 301 https://$host$request_uri;
		}
	}

	# SSL listener
	server {
		listen 443 ssl http2;
		listen [::]:443 ssl http2;

		ssl_certificate_key /config/ssl.key;
		ssl_certificate /config/ssl.crt;

		# Mozilla recommended TLS config, with all the knobs turned up
		ssl_session_timeout 1d;
		ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
		ssl_session_tickets off;
		ssl_protocols TLSv1.3;
		ssl_prefer_server_ciphers off;
		add_header Strict-Transport-Security "max-age=63072000" always;
		ssl_stapling on;
		ssl_stapling_verify on;
		ssl_trusted_certificate /config/ca_chain.crt;

		# webui-aria2
		root /var/lib/nginx/html;

		location / {
			index index.html;
		}

		# aria2 RPC
		location /jsonrpc {
			proxy_pass http://localhost:6800/jsonrpc;
		}

		# You may need this to prevent return 404 recursion.
		location = /404.html {
			internal;
		}
	}



}
